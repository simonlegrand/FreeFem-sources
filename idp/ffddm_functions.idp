macro ffddmgenerateOperatorfunctions(pr,preffe)
IFMACRO (pr#myA)
pr#myA
ENDIFMACRO
IFMACRO (!pr#myA)
func preffe#K[int] pr#A(preffe#K[int] &u)
{
  /* Matrix vector product with the global matrix */
  preffe#K[int] res(pr#isrect ? pr#prfe2#Vhi.ndof : u.n);
  if (preffe#prmesh#isincomm) {
    preffe#prmesh#tic(pr#tmvi)
    if (!bpara)
    res = pr#Aglobal*u;
    else if (!preffe#prmesh#excluded){
      IFMACRO(pr#bem,1)
      int mrhs = u.n / pr#prfe#Vhi.ndof; /* multi rhs */
      preffe#K[int] ug(preffe#Vhglob.ndof*mrhs), scaledug(preffe#Vhglob.ndof*mrhs);
      ug = 0; scaledug = 0;
      for (int i=0; i<mrhs; i++) {
        preffe#K[int] scaledu = preffe#Dih[mpiRank(preffe#prmesh#commddm)]*u(i*pr#prfe#Vhi.ndof:(i+1)*pr#prfe#Vhi.ndof-1);
        scaledug(i*preffe#Vhglob.ndof:(i+1)*preffe#Vhglob.ndof-1) = preffe#Rih[mpiRank(preffe#prmesh#commddm)]'*scaledu;
      }
      mpiAllReduce(scaledug,ug,preffe#prmesh#commddm,mpiSUM);
      preffe#K[int] resg = pr#Aglobal*ug;
      for (int i=0; i<mrhs; i++) {
        res(i*pr#prfe#Vhi.ndof:(i+1)*pr#prfe#Vhi.ndof-1) = preffe#Rih[mpiRank(preffe#prmesh#commddm)]*resg(i*preffe#Vhglob.ndof:(i+1)*preffe#Vhglob.ndof-1);
      }
      ENDIFMACRO

      IFMACRO(!pr#bem)
      if (preffe#prmesh#overlap > 0) {
        res = pr#aRd[mpiRank(preffe#prmesh#commddm)]*u;
        pr#prfe2#update(res,true);
      }
      else {
        res = pr#matN*u;
        pr#prfe2#update(res,false);
      }
      ENDIFMACRO
    }
    preffe#prmesh#toc(pr#tmvi,"",pr#tmv)
  }
  return res;
}

func preffe#K[int] pr#AT(preffe#K[int] &u)
{
  /* Matrix vector product with the transpose of the global matrix */
  preffe#K[int] res(pr#isrect ? pr#prfe#Vhi.ndof : u.n);
  IFMACRO(!pr#bem)
  if (preffe#prmesh#isincomm) {
    preffe#prmesh#tic(pr#tmvi)
    if (!bpara)
    res = pr#Aglobal'*u;
    else if (!preffe#prmesh#excluded){
      if (preffe#prmesh#overlap > 0) {
        res = pr#aRd[mpiRank(preffe#prmesh#commddm)]'*u;
        pr#prfe#update(res,true);
      }
      else {
        res = pr#matN'*u;
        pr#prfe#update(res,false);
      }
    }
    preffe#prmesh#toc(pr#tmvi,"",pr#tmv)
  }
  ENDIFMACRO
  IFMACRO(pr#bem,1)
  if (mpirank == 0) cout << "TODO" << endl;
  assert(0);
  ENDIFMACRO
  return res;
}
ENDIFMACRO

func preffe#K[int] pr#directsolve(preffe#K[int]& rhs)
{
  preffe#K[int] res(rhs.n);

  IFMACRO(pr#bem,1)
  if (mpirank == 0)
    cout << "No way to use a direct solver for BEM for now !" << endl;
  assert(0);
  ENDIFMACRO

  IFMACRO(!pr#bem)
  preffe#prmesh#tic(pr#tloc)

  if (preffe#prmesh#isincomm) {
    if (!bpara) {
      set(pr#Aglobal,solver = sparsesolver,commworld=preffe#prmesh#commself);
      res = pr#Aglobal^-1*rhs;
    }
    else if (!preffe#prmesh#excluded) {
      if (pr#matdirect.n == 1) {
        if (preffe#prmesh#overlap > 0) {
          pr#matdirect = preffe#Dih[mpiRank(preffe#prmesh#commddm)]*pr#aRd[mpiRank(preffe#prmesh#commddm)];
          pr#matdirect = preffe#Rih[mpiRank(preffe#prmesh#commddm)]'*pr#matdirect;
        }
        else
          pr#matdirect = preffe#Rih[mpiRank(preffe#prmesh#commddm)]'*pr#matN;
        pr#matdirect = pr#matdirect*preffe#Rih[mpiRank(preffe#prmesh#commddm)];
        set(pr#matdirect,solver = sparsesolver,commworld=preffe#prmesh#commddm,master=-1);
      }
      preffe#K[int] scaledrhs = preffe#Dih[mpiRank(preffe#prmesh#commddm)]*rhs;
      preffe#K[int] scaledrhsg(preffe#Vhglob.ndof);
      scaledrhsg = preffe#Rih[mpiRank(preffe#prmesh#commddm)]'*scaledrhs;
      preffe#K[int] resg = pr#matdirect^-1*scaledrhsg;
      res = preffe#Rih[mpiRank(preffe#prmesh#commddm)]*resg;
    }
  }
  
  preffe#prmesh#toc(pr#tloc,"direct solver",pr#tdirect)
  ENDIFMACRO
  
  return res;
}
// EOM

macro ffddmgeneratePrecondfunctions(pr,preffe)  

  func preffe#K[int] pr#AEprec(preffe#K[int] &x)
  {
    preffe#K[int] res(x.n);
    if (preffe#prmesh#isincomm) {
      IFMACRO(!pr#bem)
      if (!bpara) {
        if (pr#AglobEprec.n > 0)
          res = pr#AglobEprec*x;
        else
          res = pr#Aglobal*x;
      }
      else if (!preffe#prmesh#excluded){
        if (pr#aRdEprec.n > 0)
          res = pr#aRdEprec*x;
        else
          res = pr#aRd[mpiRank(preffe#prmesh#commddm)]*x;
        pr#prfe#update(res,true);
      }
      ENDIFMACRO
      IFMACRO(pr#bem,1)
      res = pr#A(x);
      ENDIFMACRO
    }
    return res;
  }   

  IFMACRO (pr#myQ)
  pr#myQ
  ENDIFMACRO
  IFMACRO (!pr#myQ)
  func preffe#K[int] pr#Q(preffe#K[int] &l, int mrhs)      /* Q = Z*E^-1*Z^T */
  {
    preffe#K[int] res(l.n);
    res=0.;
    if (preffe#prmesh#isincomm) {
      if(pr#bCM){
        preffe#K[int] vaux(1), tmp(1), zaux(1);
        
        /* Z^T l */
        if (!bpara) {
          vaux.resize(pr#ncoarsespace); tmp.resize(pr#ncoarsespace); zaux.resize(pr#ncoarsespace);
          vaux = pr#ZCM'*l;
        }
        else if (!preffe#prmesh#binexactCS){
          vaux.resize(pr#ncoarsespace); tmp.resize(pr#ncoarsespace); zaux.resize(pr#ncoarsespace);
          if (!preffe#prmesh#excluded) {
            preffe#K[int] ls = l .* preffe#Dk[mpiRank(preffe#prmesh#commddm)]; /* Z = sum_i D_i Z_i */
            tmp = pr#ZCMi'*ls;
          }
          else
          tmp = 0;
          vaux = 0;
          mpiReduce(tmp,vaux,processor(0,preffe#prmesh#mpicomm),mpiSUM);
        }
        else {
          NewMacro localmacroinexact preffe#prmesh#minexactCS EndMacro
          IFMACRO (localmacroinexact,1)
          vaux.resize(mrhs*preffe#CoarseVhi.ndof); tmp.resize(mrhs*preffe#CoarseVhi.ndof); zaux.resize(mrhs*preffe#CoarseVhi.ndof);
          if (!preffe#prmesh#excluded) {
            for (int m=0; m<mrhs; m++)
              tmp(m*preffe#CoarseVhi.ndof:(m+1)*preffe#CoarseVhi.ndof-1) = pr#ZCMi'*l(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1);
          }
          /*exchange(pr#Addmc,tmp,scaled=true);*/
          for (int m=0; m<mrhs; m++)
            pr#prfe#Coarseupdate(tmp(m*preffe#CoarseVhi.ndof:(m+1)*preffe#CoarseVhi.ndof-1),true);
          ENDIFMACRO
          ;
        }
        
        if (!preffe#prmesh#binexactCS) {
          if (!bpara || mpiRank(preffe#prmesh#mpicomm) < preffe#prmesh#pCS) {
            preffe#prmesh#tic(pr#tcsi)
            if (mpiRank(preffe#prmesh#mpicomm) == 0)
            zaux = pr#ECM^-1*vaux;
            else {
              preffe#K[int] dumx(pr#ECM.n), dumb(pr#ECM.n);
              dumx = pr#ECM^-1*dumb;	
            }
            preffe#prmesh#toccomm(pr#tcsi,"",pr#tcs,preffe#prmesh#commCS)
          }
          
          if (bpara)   
          broadcast(processor(0,preffe#prmesh#mpicomm),zaux);    
          
          if (!bpara) {
            res = pr#ZCM*zaux;
          }
          else if (!preffe#prmesh#excluded) {
            res = pr#ZCMi*zaux;
          }
        }
        else {
          NewMacro localmacroinexact preffe#prmesh#minexactCS EndMacro
          IFMACRO (localmacroinexact,1)
          preffe#K[int] solc(mrhs*preffe#CoarseVhi.ndof);
          solc = 0;
          preffe#prmesh#tic(pr#tcsi)
          /*
          DestroyRecycling(Addmc);
          DDM(Addmc, tmp, solc, O=Optc);
          solc = 0;
          */
          
          /*DDM(pr#Addmc, tmp, solc, O=pr#Optc);*/
          solc = pr#CoarsefGMRES(solc, tmp, ffddminexactCStol, ffddmmaxit, ffddmvariant);
          preffe#prmesh#toc(pr#tcsi,"",pr#tcs)
          if (!preffe#prmesh#excluded)
          for (int m=0; m<mrhs; m++)
            res(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1) = pr#ZCMi*solc(m*preffe#CoarseVhi.ndof:(m+1)*preffe#CoarseVhi.ndof-1);
          ENDIFMACRO
          ;	  
        }	
      }
      else{
        
        preffe#K[int] vaux(pr#ncoarsespace), zaux(pr#ncoarsespace), zauxg(pr#sg);
        
        /* Z^T l */
        if (!bpara) {
          int cpt = 0;
          for (int jj=0; jj<preffe#prmesh#npart; jj++) {
            preffe#K[int] tmp(preffe#Rih[jj].n);
            tmp = preffe#Rih[jj]*l;
            for (int ii=0; ii < pr#sizelg[jj]; ii++) {
              vaux[cpt]=pr#Z[cpt]'*tmp;
              cpt++;
            }
          }
          /* global deflation vectors */
          for (int jj=0; jj<pr#sg; jj++)
            vaux[cpt]=pr#Z[cpt++]'*l;

          zaux=pr#E^-1*vaux;
          cpt = 0;
          /* the 2 fors loop over the columns of Z subdomainwise */
          for (int jj=0; jj<preffe#prmesh#npart; jj++)
          for (int ii=0; ii < pr#sizelg[jj]; ii++) {
            preffe#K[int] tmp(preffe#Rih[jj].m);
            tmp = preffe#Rih[jj]'*pr#Z[cpt];
            res += zaux[cpt]*tmp;
            cpt++; /* keeps track of the global numbering of the columns of Z */
            /* we multiply 'column by element' */
          }
          /* global deflation vectors */
          for (int jj=0; jj<pr#sg; jj++)
            res += zaux[cpt]*pr#Z[cpt++];
        }
        else {
          preffe#K[int] tmp(pr#si);
          for (int i=0;i<pr#si;i++)
          tmp[i]=pr#Z[i]'*l; /* local vector Z'_i l_i */
          if(!preffe#prmesh#binexactCS) {
            IFMACRO(pr#CSwithpetsc)
            if (mpiRank(preffe#prmesh#mpicomm) < preffe#prmesh#pCS)
              preffe#prmesh#tic(pr#tcsi)
              tmp = pr#petscE^-1*tmp;
              preffe#prmesh#toccomm(pr#tcsi,"",pr#tcs,preffe#prmesh#commCS)
            ENDIFMACRO
            IFMACRO(!pr#CSwithpetsc)
            mpiGatherv(tmp,vaux,processor(0,preffe#prmesh#mpicomm),pr#sizelgworld,pr#offsetiworld);
            /* mpiGatherv puts together inside vaux the local vectors (whose sizes are in sizelg) */
            for (int ii=0; ii < pr#sg; ii++)
              vaux[pr#ncoarsespace-pr#sg+ii] = pr#prfe#scalprod(pr#Z[ii+pr#si], l);

            if (mpiRank(preffe#prmesh#mpicomm) < preffe#prmesh#pCS) {
              preffe#prmesh#tic(pr#tcsi)
              if (mpiRank(preffe#prmesh#mpicomm) == 0)
              zaux = pr#E^-1*vaux;
              else {
                preffe#K[int] dumx(pr#E.n), dumb(pr#E.n);
                dumx = pr#E^-1*dumb;
              }
              preffe#prmesh#toccomm(pr#tcsi,"",pr#tcs,preffe#prmesh#commCS)
            }
            mpiScatterv(zaux,tmp,processor(0,preffe#prmesh#mpicomm),pr#sizelgworld,pr#offsetiworld);

            if (pr#sg > 0) {
              if (mpiRank(preffe#prmesh#mpicomm) == 0)
                zauxg = zaux(pr#ncoarsespace-pr#sg:pr#ncoarsespace-1);
              broadcast(processor(0,preffe#prmesh#mpicomm),zauxg);
            }

            ENDIFMACRO
            /* inverse of mpiGatherv, cut the global zaux into the local tmp[i] */
            for (int i=0;i<pr#si;i++) {
              res += tmp[i]*pr#Z[i];
            }
            /* sum_j R_i Z_j zaux_j */
          }
          else {
            NewMacro localmacroinexact preffe#prmesh#minexactgeneoCS EndMacro
            IFMACRO (localmacroinexact,1)
            
            mpiRequest[int] rq(pr#prfe#prmesh#listofsupers.n-pr#prfe#prmesh#issuper+pr#prfe#prmesh#issuper*(pr#prfe#prmesh#insuperwithoverlap.n-!pr#prfe#prmesh#excluded));
            int cpt = 0;
            pr#prfe#K[int][int] tres(pr#prfe#prmesh#insuperwithoverlap.n);
            for (int is=0; is < pr#prfe#prmesh#listofsupers.n; is++)
            if (!pr#prfe#prmesh#issuper || pr#prfe#prmesh#mysuperrank != pr#prfe#prmesh#listofsupers[is])
              Isend(processor(pr#prfe#prmesh#rankofsuper(pr#prfe#prmesh#listofsupers[is]),pr#prfe#prmesh#mpicomm,rq[cpt++]),tmp);
            if (pr#prfe#prmesh#issuper) {
              vaux.resize(pr#prfe#superDk[mpiRank(pr#prfe#prmesh#commsuper)].n);
              if (!pr#prfe#prmesh#excluded)
                vaux(pr#superlocalnuminv[pr#offseti[mpiRank(pr#prfe#prmesh#commddm)]]:pr#superlocalnuminv[pr#offseti[mpiRank(pr#prfe#prmesh#commddm)]]+pr#sizelg[mpiRank(pr#prfe#prmesh#commddm)]-1) = tmp;
              for (int i=!pr#prfe#prmesh#excluded; i < pr#prfe#prmesh#insuperwithoverlap.n; i++) {
                tres[i].resize(pr#sizelg[pr#prfe#prmesh#insuperwithoverlap[i]]);              
                Irecv(processor(pr#prfe#prmesh#insuperwithoverlap[i]+pr#prfe#prmesh#pCS*pr#prfe#prmesh#exclude,pr#prfe#prmesh#mpicomm,rq[cpt++]),tres[i]);
              }
            }
            for (int i=0;i < cpt;i++)
              int k = mpiWaitAny(rq);
            
            if (pr#prfe#prmesh#issuper)
            for (int i=!pr#prfe#prmesh#excluded; i < pr#prfe#prmesh#insuperwithoverlap.n; i++)
              vaux(pr#superlocalnuminv[pr#offseti[pr#prfe#prmesh#insuperwithoverlap[i]]]:pr#superlocalnuminv[pr#offseti[pr#prfe#prmesh#insuperwithoverlap[i]]]+pr#sizelg[pr#prfe#prmesh#insuperwithoverlap[i]]-1) = tres[i];         
            
            if (preffe#prmesh#issuper) {
              preffe#prmesh#tic(pr#tcsi)
              
              if (preffe#prmesh#binexactgeneoCS) {
                preffe#K[int] solc(vaux.n);
                solc = 0;
                solc = pr#superfGMRES(solc, vaux, ffddminexactCStol, ffddmmaxit, ffddmvariant);
                solc = solc .* preffe#superDk[mpiRank(preffe#prmesh#commsuper)];
                vaux.resize(pr#ncoarsespace);
                vaux = pr#RsuperCS'*solc;
              }
              else {
                preffe#K[int] tmp = vaux .* preffe#superDk[mpiRank(preffe#prmesh#commsuper)];
                preffe#K[int] tmp2(pr#RsuperCS.m);
                tmp2 = pr#RsuperCS'*tmp;
                vaux.resize(pr#ncoarsespace);
                vaux = pr#E^-1*tmp2;
                /*
                tmp = pr#RsuperCS*vaux;
                tmp = tmp .* preffe#superDk[mpiRank(preffe#prmesh#commsuper)];
                vaux = pr#RsuperCS'*tmp;
                */
              }
              
              preffe#prmesh#toccomm(pr#tcsi,"",pr#tcs,preffe#prmesh#commsuper)
            }
            
            if (pr#prfe#prmesh#issuper) {
              if (!pr#prfe#prmesh#excluded)
                tmp = vaux(pr#offseti[mpiRank(pr#prfe#prmesh#commddm)]:pr#offseti[mpiRank(pr#prfe#prmesh#commddm)]+pr#sizelg[mpiRank(pr#prfe#prmesh#commddm)]-1);
              mpiRequest[int] rq(pr#prfe#prmesh#insuperinterior.n-!pr#prfe#prmesh#excluded);
              pr#prfe#K[int][int] tres(pr#prfe#prmesh#insuperinterior.n);
              for (int i=!pr#prfe#prmesh#excluded; i < pr#prfe#prmesh#insuperinterior.n; i++) {
                tres[i].resize(pr#sizelg[pr#prfe#prmesh#insuperinterior[i]]);
                tres[i] = vaux(pr#offseti[pr#prfe#prmesh#insuperinterior[i]]:pr#offseti[pr#prfe#prmesh#insuperinterior[i]]+pr#sizelg[pr#prfe#prmesh#insuperinterior[i]]-1);
              }
              for (int i=!pr#prfe#prmesh#excluded; i < pr#prfe#prmesh#insuperinterior.n; i++) {
                Isend(processor(pr#prfe#prmesh#insuperinterior[i]+pr#prfe#prmesh#pCS*pr#prfe#prmesh#exclude,pr#prfe#prmesh#mpicomm,rq[i-!pr#prfe#prmesh#excluded]),tres[i]);
              }
              for (int i=0;i < pr#prfe#prmesh#insuperinterior.n-!pr#prfe#prmesh#excluded;i++)
                int k = mpiWaitAny(rq);
            }
            else {
              mpiRequest rq;
              Irecv(processor(pr#prfe#prmesh#mysuper,pr#prfe#prmesh#mpicomm,rq),tmp);
              mpiWait(rq);
            }

            for (int i=0;i<pr#si;i++) {
              res += tmp[i]*pr#Z[i];
            }
            /* sum_j R_i Z_j zaux_j */
            ENDIFMACRO
            ;
          }
          pr#prfe#update(res,false); /* recover the Z_j zaux_j (in the overlap) computed by neighbouring subdomains */

          if (!pr#prfe#prmesh#excluded)
          for (int i=0;i<pr#sg;i++)
            res += zauxg[i]*pr#Z[pr#si+i];
        }
      }
    }
    return res;
  }
  ENDIFMACRO

func preffe#K[int] pr#Q(preffe#K[int] &l)      /* Q = Z*E^-1*Z^T */
{
  return pr#Q(l, 1);
}

IFMACRO (pr#myPREC1)
pr#myPREC1
ENDIFMACRO
IFMACRO (!pr#myPREC1)
func preffe#K[int] pr#PREC1(preffe#K[int] &l, int mrhs)
{
  /* Application of the 1 level preconditioner
  M^{-1}*y = \sum Ri^T*Di*Ai^{-1}*Ri*y
  Ri restriction operators, Ai local matrices */
  
  preffe#K[int] s(l.n);
  s = 0;
  
  if (preffe#prmesh#isincomm) {
    preffe#prmesh#tic(pr#tpreci)
    
    if (pr#prec == "none") {
      s = l;
    }
    else {
      IFMACRO(!pr#superwithchunk)
      if (!bpara) {
        assert(mrhs == 1);
        for(int i=0; i<preffe#prmesh#npart; ++i)  {
          preffe#K[int] bi(preffe#Rih[i].n);
          bi = preffe#Rih[i]*l;           /* restricts rhs */
          if(pr#prec == "soras")
          bi = bi .* preffe#Dk[i];
          preffe#K[int] ui = pr#aR[i] ^-1 * bi;  /* local solves */
          if(pr#prec != "asm")
          ui = ui .* preffe#Dk[i];                      /* partition of unity */
          s += preffe#Rih[i]'*ui;                  /* prolongation */
        }
      }
      else if (!preffe#prmesh#excluded){
        preffe#K[int] aux = l;
        if(pr#prec == "soras")
        for (int m=0; m<mrhs; m++)
          aux(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1) = aux(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1) .* preffe#Dk[mpiRank(preffe#prmesh#commddm)];
        /* s = aR[mpirank]^-1 * l; */
        s = pr#aR[mpiRank(preffe#prmesh#commddm)]^-1 * aux;
        if(pr#prec != "asm"){
          for (int m=0; m<mrhs; m++)
            pr#prfe#update(s(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1),true);
        }
        else{
          for (int m=0; m<mrhs; m++) {
            pr#prfe#update(s(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1),false);
            pr#prfe#update(s(m*preffe#Vhi.ndof:(m+1)*preffe#Vhi.ndof-1),true);
          }
        }       
      }
      ENDIFMACRO
      IFMACRO(pr#superwithchunk)
      preffe#K[int] chunkl(pr#superchunkinterp.m);
      if(pr#prec == "soras") {
        preffe#K[int] lD = l .* pr#chunksuperDk;
        chunkl = pr#superchunkinterp'*lD;
      }
      else
        chunkl = pr#superchunkinterp'*l;

      pr#chunkupdate(chunkl,true);

      preffe#K[int] chunku(chunkl.n);
      chunku = 0;

      chunku = pr#chunkfGMRES(chunku, chunkl, ffddmtol, ffddmmaxit, ffddmvariant);
      /* chunku = pr#chunkdirectsolve(chunkl); */

      chunku = chunku .* pr#chunkDk[mpiRank(pr#chunkcommddm)];

      preffe#K[int] s = pr#superchunkinterp*chunku;

      if(pr#prec != "asm")
        s = s .* pr#chunksuperDk;

      pr#prfe#update(s,false);
      return s;
      ENDIFMACRO
    }
    preffe#prmesh#toc(pr#tpreci,"",pr#tprec)
  }
  return s;
}

func preffe#K[int] pr#PREC1(preffe#K[int] &l)
{
  int mrhs = 1;
  if (preffe#prmesh#isincomm && !preffe#prmesh#excluded) {
    int ndof = bpara ? preffe#Dk[mpiRank(preffe#prmesh#commddm)].n : preffe#Vhglob.ndof;
    assert(l.n%ndof == 0);
    mrhs = l.n/ndof;
  }
  return pr#PREC1(l, mrhs);
}
ENDIFMACRO

func preffe#K[int] pr#PREC2level(preffe#K[int] &l)
{
  preffe#K[int] ltemp(l.n);
  ltemp = 0;
  if (preffe#prmesh#isincomm) {
    
    preffe#prmesh#tic(pr#tpreci)
    
    preffe#K[int] Ql;
    preffe#K[int] aux;
    
    /* Q */
    if (pr#corr == "AD" || pr#corr == "ADEF1" || pr#corr == "ADEF2" || pr#corr == "BNN" || pr#corr == "RBNN1")   {
      Ql.resize(l.n);
      Ql = pr#Q(l);
    }
    
    /* P */
    if (pr#corr == "ADEF1" || pr#corr == "BNN" || pr#corr == "RBNN1") {
      aux.resize(l.n);
      if (pr#bCM)
      aux = pr#AEprec(Ql);
      else
      aux = pr#A(Ql);
      ltemp = l-aux; 
    }
    else
    ltemp = l; 
    
    preffe#prmesh#toc(pr#tpreci,"",pr#tprec)
    
    /* M^-1 */
    preffe#K[int] s(l.n);
    s = pr#PREC1(ltemp);
    
    preffe#prmesh#tic(pr#tpreci)

    /* P^T */
    if (pr#corr == "ADEF2" || pr#corr == "BNN" || pr#corr == "RBNN1" || pr#corr == "RBNN2") {
      if (pr#bCM)
      ltemp = pr#AEprec(s);
      else
      ltemp = pr#A(s);
      aux.resize(l.n);
      aux = pr#Q(ltemp);
      ltemp = s-aux;
    }
    else
    ltemp = s;    
    
    /* + Q */
    if (pr#corr == "AD" || pr#corr == "ADEF1" || pr#corr == "ADEF2" || pr#corr == "BNN") 
    ltemp += Ql;
    
    preffe#prmesh#toc(pr#tpreci,"",pr#tprec)
  }
  return ltemp;
}

/*
func preffe#K[int] pr#PRECTEST(preffe#K[int] &l)
{
   preffe#K[int] res(l.n),x0(l.n);
   IFMACRO (pr#minexactCS,1)
   x0 = 0;
   res = pr#CoarsefGMRES(x0, l, 1.e-6, 5, "right");
   ENDIFMACRO
   return res;
}
*/

func preffe#K[int] pr#PRECTEST(preffe#K[int] &l)
{
  /*
   preffe#K[int] dd = pr#aRd[0].diag;
   dd = 1./dd;
   dd = l.*dd;
   return dd;
   */
   return l;
}

/*
func preffe#K[int] pr#PRECTEST(preffe#K[int] &l)
{
   preffe#K[int] res(l.n);
   preffe#K[int] ls = l .* preffe#Dk[mpiRank(preffe#prmesh#commddm)];
   preffe#K[int] tmp = pr#ZCMi'*ls;
   
   IFMACRO (preffe#prmesh#minexactCS,1)
   preffe#K[int] rr = pr#CoarsePREC1(tmp);
   res = pr#ZCMi*rr;
   ENDIFMACRO

   return res;
}
*/

/* CMCG */
/*
func pr#K[int] pr#PRECTEST(pr#K[int] &l)
{
  if (cpt%2 >3) {
  Vhi<pr#K> pr#mdef(u0),pr#mdef(ucmcg);
  u0[] = 0;
  ffcmcgrhs(Vhi,Thi,ThAugmented,l,u0,ucmcg)
  cpt++;
  return ucmcg[];
  }
  else{
    cpt++;
    return pr#PREC1(l);
  }
}
*/

IFMACRO (pr#myPREC)
pr#myPREC
ENDIFMACRO
IFMACRO (!pr#myPREC)
func preffe#K[int] pr#PREC(preffe#K[int] &l)
{
	if (pr#corr == "test")
	  return pr#PRECTEST(l);
    else if (pr#corr == "none")
      return pr#PREC1(l);
    else
      return pr#PREC2level(l);
}
ENDIFMACRO

func preffe#K[int] pr#fGMRES(preffe#K[int]& x0, preffe#K[int]& rhs, real eps, int maxit, string sprec)
{	
  if (preffe#prmesh#isincomm) {
    preffe#prmesh#tic(pr#tgmresi)
    
    preffe#K[int] uni(x0.n);
    
    int dim = min(maxit,ffddmrestart);

    IFMACRO(pr#withhpddmkrylov)
    load "hpddm"
    if (!preffe#prmesh#excluded) {
      uni = x0;
      IterativeMethod(pr#A, rhs,uni, precon = pr#PREC, sparams = "-hpddm_tol "+eps+" -hpddm_variant "+(preffe#prmesh#binexactCS ? "flexible" : sprec)+" -hpddm_gmres_restart "+dim+" -hpddm_max_it "+maxit+(mpirank == 0 ? " -hpddm_verbosity "+pr#verbosity : "")+" -hpddm_orthogonalization mgs",communicator = preffe#prmesh#mpicomm);
    }
    else
    IterativeMethod(pr#A, uni,uni, precon = pr#PREC, sparams = "-hpddm_tol "+eps+" -hpddm_variant "+(preffe#prmesh#binexactCS ? "flexible" : sprec)+" -hpddm_gmres_restart "+dim+" -hpddm_max_it "+maxit+(mpirank == 0 ? " -hpddm_verbosity "+pr#verbosity : "")+" -hpddm_orthogonalization mgs",communicator = preffe#prmesh#mpicomm);
    ENDIFMACRO
    
    IFMACRO(pr#withhpddm)
    uni = x0;
    real[int] timings(1);
    string prefix = Stringification(pr)+"_";
    set(pr#hpddmOP, sparams = "-hpddm_"+prefix+"schwarz_method "+pr#prec+" -hpddm_"+prefix+"tol "+eps+" -hpddm_"+prefix+"variant "+(preffe#prmesh#binexactCS ? "flexible" : sprec)+" -hpddm_"+prefix+"gmres_restart "+dim+" -hpddm_"+prefix+"max_it "+maxit+" -hpddm_"+prefix+"verbosity "+pr#verbosity+" -hpddm_"+prefix+"orthogonalization mgs", prefix=prefix);
    if (pr#corr == "AD")
      set(pr#hpddmOP, sparams = "-hpddm_"+prefix+"schwarz_coarse_correction additive", prefix=prefix);
    else if (pr#corr == "BNN")
      set(pr#hpddmOP, sparams = "-hpddm_"+prefix+"schwarz_coarse_correction balanced", prefix=prefix);
    else if (pr#corr == "ADEF1")
      set(pr#hpddmOP, sparams = "-hpddm_"+prefix+"schwarz_coarse_correction deflated", prefix=prefix);
    
    if (pr#prec == "oras" || pr#prec == "soras")
      DDM(pr#hpddmOP,rhs,uni,O=pr#aR[mpiRank(preffe#prmesh#commddm)],communicator=preffe#prmesh#commddm,timing=timings);
    else
      DDM(pr#hpddmOP,rhs,uni,communicator=preffe#prmesh#commddm,timing=timings);
    
    /*
    real[int] timingsg(timings.n);
    mpiAllReduce(timings,timingsg,mpiCommWorld,mpiMAX);
    */
    pr#tgmres -= timings[0];
    pr#tfacto += timings[0];
    ENDIFMACRO

    IFMACRO(pr#withpetsc)
    uni = x0;
    uni = pr#petscOP^-1*rhs;
    ENDIFMACRO

    IFMACRO((!pr#withhpddm)&(!pr#withhpddmkrylov)&(!pr#withpetsc))
    preffe#K[int,int] Hn(dim+2,dim+1);     /* Hessenberg matrix */
    Hn = 0.;

    IFMACRO(pr#withritz)
    preffe#K[int,int] Hessenberg(dim+2,dim+1);     /* copy of Hessenberg matrix for Ritz values/harmonics */
    Hessenberg=0.;
    pr#RitzValues.resize(dim+1);
    for (int i=0;i<dim+1;i++)
      pr#RitzValues[i].resize(i+1);
    pr#RitzHarmonicValues.resize(dim+1);
    for (int i=0;i<dim+1;i++)
      pr#RitzHarmonicValues[i].resize(i+1);
    ENDIFMACRO

    preffe#K[int,int] rot(2,dim+2);
    rot = 0.;
    preffe#K[int] g(dim+1),g1(dim+1);
    g = 0.;  g1 = 0.;
    
    preffe#K[int] ri(x0.n),zi(x0.n),vi(x0.n),wi(x0.n),x0i(x0.n);
    preffe#K[int][int] Vi(dim+1), Vpi(dim+1);
    for (int i=0;i<dim+1;i++){
      Vi[i].resize(x0.n);
      Vpi[i].resize(x0.n);
    }

    real normb = 0;
    
    if (!preffe#prmesh#excluded) {
      wi = rhs;
      for [i,bi: wi] bi = (abs(bi) > 1.e+20 ? 0 : bi);
    }
    
    if (sprec == "right")
      normb = sqrt(real(pr#prfe#scalprod(wi,wi)));
    else{
      vi = pr#PREC(wi);
      normb = sqrt(real(pr#prfe#scalprod(vi,vi)));
    }
    if (normb < 1.e-20 || eps < 0) normb = 1.;

    real relres = 0;
    
    pr#nbiter = 1;
    pr#reshistory.resize(maxit);
    
    x0i = x0;
    
    while (pr#nbiter <= maxit) {
      
      if (pr#corr=="ADEF2" || pr#corr=="RBNN1" || pr#corr=="RBNN2")
        /* TODO handle restart */
        x0i = pr#Q(rhs);
      
      ri = pr#A(x0i);

      if (!preffe#prmesh#excluded)
        ri -= rhs;
      ri *= -1.0;
      
      if (sprec == "right")
        zi = ri;
      else
        zi = pr#PREC(ri);
      
      g[0] = sqrt(real(pr#prfe#scalprod(zi,zi)));
      
      if(abs(g[0])/normb < abs(eps)) {
          if (pr#verbosity && (mpiRank(preffe#prmesh#mpicomm)==0)) {
            cout << "["+Stringification(pr)+"] GMRES has converged in 0 iteration " << endl;
            cout << "["+Stringification(pr)+"] The relative residual is " +  abs(g[0])/normb << endl;
          }
          pr#nbiter = 0;
          uni = x0;
          break;
      }

      Vi[0]=1/g[0]*zi;           /* first basis vector */
      
      for(int it=0; it<dim; it++) {
        if (sprec == "right") {
          Vpi[it] = pr#PREC(Vi[it]);
          vi=Vpi[it];
          wi=pr#A(vi);
        }
        else {
          vi=pr#A(Vi[it]);
          wi = pr#PREC(vi);
        }

        for(int i=0; i<it+1; i++) {
          Hn(i,it) = pr#prfe#scalprod(wi,Vi[i]);
          IFMACRO(pr#withritz)
          Hessenberg(i,it)=Hn(i,it);
          ENDIFMACRO
          wi -=  conj(Hn(i,it))*Vi[i];
        }
        Hn(it+1,it) = sqrt(real(pr#prfe#scalprod(wi,wi)));
        IFMACRO(pr#withritz)
        Hessenberg(it+1,it)=Hn(it+1,it);
        ENDIFMACRO
        preffe#K aux = Hn(it+1,it);
        Vi[it+1]=1/aux*wi;

        IFMACRO(pr#withritz)
        load "lapack"
        preffe#K[int,int] Hnb1=Hessenberg(0:it,0:it);
        preffe#K[int,int] subHn=Hessenberg(0:it+1,0:it);
        preffe#K[int,int] Hnb1trans=Hnb1';
        preffe#K[int,int] subHntrans=subHn';
        preffe#K[int,int] Hnprod = subHntrans*subHn;
        preffe#K[int,int] Hnbinv = Hnb1trans^-1;
        preffe#K[int,int] S = Hnbinv*Hnprod;
        preffe#K[int] ritzharmonicvalues(it+1);
        preffe#K[int,int] ritzharmonicvectors(it+1,it+1);
        IFMACRO(preffe#K,complex)
        zgeev(S,pr#RitzHarmonicValues[it],ritzharmonicvectors);
        ENDIFMACRO
        IFMACRO(preffe#K,real)
        dgeev(S,pr#RitzHarmonicValues[it],ritzharmonicvectors);
        ENDIFMACRO
        pr#RitzHarmonicValues[it].im *= -1;
        preffe#K[int,int] Hnb2=Hessenberg(0:it,0:it);
        preffe#K[int] ritzvalues(it+1);
        preffe#K[int,int] ritzvectors(it+1,it+1);
        IFMACRO(preffe#K,complex)
        zgeev(Hnb2,pr#RitzValues[it],ritzvectors);
        ENDIFMACRO
        IFMACRO(preffe#K,real)
        dgeev(Hnb2,pr#RitzValues[it],ritzvectors);
        ENDIFMACRO
        pr#RitzValues[it].im *= -1;
        ENDIFMACRO

        for(int i=0; i<it; i++){ 	 /* QR decomposition of Hn */
          preffe#K aa = conj(rot(0,i))*Hn(i,it)+conj(rot(1,i))*Hn(i+1,it);
          preffe#K bb = -rot(1,i)*Hn(i,it)+rot(0,i)*Hn(i+1,it);
          Hn(i,it) = aa;
          Hn(i+1,it) = bb;
        }

        preffe#K sq = sqrt( conj(Hn(it,it))*Hn(it,it) + Hn(it+1,it)*Hn(it+1,it) );

        rot(0,it) = Hn(it,it)/sq;
        rot(1,it) = Hn(it+1,it)/sq;

        Hn(it,it) = conj(rot(0,it))*Hn(it,it)+conj(rot(1,it))*Hn(it+1,it);
        Hn(it+1,it) =  0.;
        g[it+1] = -rot(1,it)*g[it];
        g[it] = conj(rot(0,it))*g[it];

        preffe#K[int] y(it+1);     	/* Reconstruct the solution */
        for(int i=it; i>=0; i--) {
          g1[i] = g[i];
          for(int j=i+1; j<it+1; j++){
            g1[i] = g1[i]-Hn(i,j)*y[j];
          }
          y[i]=g1[i]/Hn(i,i);
        }

        uni = x0i;
        for(int i=0;i<it+1;i++){
          if (sprec == "right")
            uni= uni+ conj(y[i])*Vpi[i];
          else
            uni= uni+ conj(y[i])*Vi[i];
        }

        real relerr = 0;
        relres = abs(g[it+1]);

        /*
        if (pr#bdirect){
          if (!bpara) {
            pr#ver[] = uni[] - pr#uglob[];
            relerr = pr#ver[].l2/pr#uglob[].l2;
          }
          else {
            if (!preffe#prmesh#excluded) {
              vi[] = preffe#Rih[mpiRank(preffe#prmesh#commddm)] * pr#uglob[];
              vi[] -= uni[];
            }
            relerr = sqrt(real(pr#prfe#scalprod(vi[],vi[])));
            relerr /= pr#uglob[].l2;
          }
        }
        */

        if (pr#verbosity >= 3 && (mpiRank(preffe#prmesh#mpicomm)==0)) {
          if (pr#bdirect)
            cout << "["+Stringification(pr)+"] It: "<< pr#nbiter << " Residual = " << relres << " Rel res = " << relres/normb <<  " Relative L2 Error =  "<< relerr <<  endl;
          else
            cout << "["+Stringification(pr)+"] It: "<< pr#nbiter << " Residual = " << relres << " Rel res = " << relres/normb << endl;
        }

        if (pr#verbosity >= 10){
          IFMACRO(preffe#defplot)
          preffe#Vhi<preffe#K> def(unih);
          unih[] = uni;
          preffe#mplot(preffe#defplot(unih), "["+Stringification(pr)+"] Approximate solution at step " + pr#nbiter)
          ENDIFMACRO
          ;
        }

        pr#reshistory[pr#nbiter-1] = relres/normb;
        if(relres/normb < abs(eps)) {
          if (pr#verbosity && (mpiRank(preffe#prmesh#mpicomm)==0)) {
            cout << "["+Stringification(pr)+"] GMRES has converged in " + (pr#nbiter) + " iterations " << endl;
            cout << "["+Stringification(pr)+"] The relative residual is " +  relres/normb << endl;
          }
          break;
        }
        pr#nbiter++;
        if (pr#nbiter > maxit)
          break;
      }
      if(relres/normb < abs(eps) || pr#nbiter > maxit)
        break;

      x0i = uni;
      if (pr#verbosity && (mpiRank(preffe#prmesh#mpicomm)==0))
        cout << "["+Stringification(pr)+"] GMRES restart(" + dim +")" << endl;
    }
    if(relres/normb >= abs(eps))
    if (pr#verbosity && (mpiRank(preffe#prmesh#mpicomm)==0)) {
      cout << "["+Stringification(pr)+"] GMRES did not converge in " + maxit + " iterations " << endl;
      cout << "["+Stringification(pr)+"] The relative residual is " +  relres/normb << endl;
    }
    ENDIFMACRO
    pr#reshistory.resize(min(maxit,pr#nbiter));
    preffe#prmesh#toc(pr#tgmresi,"",pr#tgmres)
    return uni;
  }
  else
    return x0; /* dummy, not in comm */
}
/*# finGMRESsolve #*/

// EOM

